실습 설명
마침내 프로그램 개발을 완료한 영준이는 마지막으로 이번 프로젝트의 파일들을 어떻게 관리하는 게 좋을지 고민입니다.
여러 가지 기능을 개발하다 보니 모듈 파일도 생각보다 많이 늘어났는데요. 고민 끝에 영준이는 비슷한 특성을 가진 모듈 파일들을 하나의 폴더에 모아 파일들을 정리해보려 합니다.
일단은 functions폴더 안에 add.js, delete.js, roll.js를 넣어두고 이 모듈 파일을 하나로 묶어서 관리하기 위해 functions.js라는 파일을 만들었습니다.

영준이를 위해 그동안 배운 모듈 문법을 활용해서 functions.js를 완성한 다음, 조금 더 간결한 방식으로 index.js에서 필요한 함수들을 import해 주세요.
----
----
해설
import 와 export 키워드를 잘 활용하면 여러 모듈 파일들을 불러와서 다시 내보내는 패턴의 모듈 파일도 만들 수가 있습니다.

functions.js에서 functions 폴더 안에 있는 모듈 파일을 import하고, 각 함수를 export한다면 다음과 같이 코드를 작성할 수 있습니다.

functions.js

import addMenu from './functions/add.js';
import deleteMenu from './functions/delete.js';
import rollMenu from './functions/roll.js';

export { addMenu, deleteMenu, rollMenu };
그러면 index.js 에서는 다음과 같이 import할 수 있겠죠?

index.js

import { addBtn, addInput, list, rollBtn } from './tags.js';
import { addMenu, deleteMenu, rollMenu } from './functions.js';

const data = [];

addBtn.addEventListener('click', () => addMenu(data));
addInput.addEventListener('keypress', (e) => e.code === 'Enter' && addMenu(data));
list.addEventListener('click', ({ target }) => target.tagName === 'BUTTON' && deleteMenu(data, target.dataset.index));
rollBtn.addEventListener('click', () => list.classList.contains('rolling') || rollMenu(data));
이렇게 비슷한 성격의 모듈 파일들을 하나의 폴더에 모아두고, 이 파일들을 묶어서 다시 내보내는 모듈 파일을 작성해주면 조금 더 효율적으로 프로젝트 파일들을 관리할 수가 있습니다.
여러 가지 기능을 개발하면서 늘어나는 모듈 파일들을 효율적으로 관리하기 위해 functions.js와 같은 패턴을 활용할 수 있다는 점도 참고해 두시면 좋을 것 같습니다.